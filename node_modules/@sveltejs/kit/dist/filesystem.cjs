'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

/** @param {string} dir */
function mkdirp(dir) {
	try {
		fs__default['default'].mkdirSync(dir, { recursive: true });
	} catch (e) {
		if (e.code === 'EEXIST') return;
		throw e;
	}
}

/** @param {string} path */
function rimraf(path) {
	(fs__default['default'].rmSync || fs__default['default'].rmdirSync)(path, { recursive: true, force: true });
}

/**
 * @param {string} from
 * @param {string} to
 * @param {(basename: string) => boolean} filter
 */
function copy(from, to, filter = () => true) {
	if (!fs__default['default'].existsSync(from)) return [];
	if (!filter(path__default['default'].basename(from))) return [];

	const files = [];
	const stats = fs__default['default'].statSync(from);

	if (stats.isDirectory()) {
		fs__default['default'].readdirSync(from).forEach((file) => {
			files.push(...copy(path__default['default'].join(from, file), path__default['default'].join(to, file)));
		});
	} else {
		mkdirp(path__default['default'].dirname(to));
		fs__default['default'].copyFileSync(from, to);
		files.push(to);
	}

	return files;
}

exports.copy = copy;
exports.mkdirp = mkdirp;
exports.rimraf = rimraf;
